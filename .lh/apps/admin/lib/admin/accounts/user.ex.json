{
    "sourceFile": "apps/admin/lib/admin/accounts/user.ex",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1657786542764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1657786542764,
            "name": "Commit-0",
            "content": "defmodule Admin.Accounts.User do\n  use Ecto.Schema\n  import Ecto.Changeset\n\n  schema \"users\" do\n    field :email, :string\n    field :password, :string, virtual: true, redact: true\n    field :hashed_password, :string, redact: true\n    field :confirmed_at, :naive_datetime\n\n    timestamps()\n  end\n\n  @doc \"\"\"\n  A user changeset for registration.\n\n  It is important to validate the length of both email and password.\n  Otherwise databases may truncate the email without warnings, which\n  could lead to unpredictable or insecure behaviour. Long passwords may\n  also be very expensive to hash for certain algorithms.\n\n  ## Options\n\n    * `:hash_password` - Hashes the password so it can be stored securely\n      in the database and ensures the password field is cleared to prevent\n      leaks in the logs. If password hashing is not needed and clearing the\n      password field is not desired (like when using this changeset for\n      validations on a LiveView form), this option can be set to `false`.\n      Defaults to `true`.\n  \"\"\"\n  def registration_changeset(user, attrs, opts \\\\ []) do\n    user\n    |> cast(attrs, [:email, :password])\n    |> validate_email()\n    |> validate_password(opts)\n  end\n\n  defp validate_email(changeset) do\n    changeset\n    |> validate_required([:email])\n    |> validate_format(:email, ~r/^[^\\s]+@[^\\s]+$/, message: \"must have the @ sign and no spaces\")\n    |> validate_length(:email, max: 160)\n    |> unsafe_validate_unique(:email, Admin.Repo)\n    |> unique_constraint(:email)\n  end\n\n  defp validate_password(changeset, opts) do\n    changeset\n    |> validate_required([:password])\n    |> validate_length(:password, min: 7, max: 72)\n    # |> validate_format(:password, ~r/[a-z]/, message: \"at least one lower case character\")\n    # |> validate_format(:password, ~r/[A-Z]/, message: \"at least one upper case character\")\n    # |> validate_format(:password, ~r/[!?@#$%^&*_0-9]/, message: \"at least one digit or punctuation character\")\n    |> maybe_hash_password(opts)\n  end\n\n  defp maybe_hash_password(changeset, opts) do\n    hash_password? = Keyword.get(opts, :hash_password, true)\n    password = get_change(changeset, :password)\n\n    if hash_password? && password && changeset.valid? do\n      changeset\n      # If using Bcrypt, then further validate it is at most 72 bytes long\n      |> validate_length(:password, max: 72, count: :bytes)\n      |> put_change(:hashed_password, Bcrypt.hash_pwd_salt(password))\n      |> delete_change(:password)\n    else\n      changeset\n    end\n  end\n\n  @doc \"\"\"\n  A user changeset for changing the email.\n\n  It requires the email to change otherwise an error is added.\n  \"\"\"\n  def email_changeset(user, attrs) do\n    user\n    |> cast(attrs, [:email])\n    |> validate_email()\n    |> case do\n      %{changes: %{email: _}} = changeset -> changeset\n      %{} = changeset -> add_error(changeset, :email, \"did not change\")\n    end\n  end\n\n  @doc \"\"\"\n  A user changeset for changing the password.\n\n  ## Options\n\n    * `:hash_password` - Hashes the password so it can be stored securely\n      in the database and ensures the password field is cleared to prevent\n      leaks in the logs. If password hashing is not needed and clearing the\n      password field is not desired (like when using this changeset for\n      validations on a LiveView form), this option can be set to `false`.\n      Defaults to `true`.\n  \"\"\"\n  def password_changeset(user, attrs, opts \\\\ []) do\n    user\n    |> cast(attrs, [:password])\n    |> validate_confirmation(:password, message: \"does not match password\")\n    |> validate_password(opts)\n  end\n\n  @doc \"\"\"\n  Confirms the account by setting `confirmed_at`.\n  \"\"\"\n  def confirm_changeset(user) do\n    now = NaiveDateTime.utc_now() |> NaiveDateTime.truncate(:second)\n    change(user, confirmed_at: now)\n  end\n\n  @doc \"\"\"\n  Verifies the password.\n\n  If there is no user or the user doesn't have a password, we call\n  `Bcrypt.no_user_verify/0` to avoid timing attacks.\n  \"\"\"\n  def valid_password?(%Admin.Accounts.User{hashed_password: hashed_password}, password)\n      when is_binary(hashed_password) and byte_size(password) > 0 do\n    Bcrypt.verify_pass(password, hashed_password)\n  end\n\n  def valid_password?(_, _) do\n    Bcrypt.no_user_verify()\n    false\n  end\n\n  @doc \"\"\"\n  Validates the current password otherwise adds an error to the changeset.\n  \"\"\"\n  def validate_current_password(changeset, password) do\n    if valid_password?(changeset.data, password) do\n      changeset\n    else\n      add_error(changeset, :current_password, \"is not valid\")\n    end\n  end\nend\n"
        }
    ]
}